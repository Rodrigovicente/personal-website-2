---
const { id } = Astro.props
---

<script>
	
	const introElem = document.getElementById("intro")
	const introContentElem = introElem?.getElementsByClassName("intro-content")[0] as HTMLDivElement
	const gridElem = document.getElementById("grid")

	const cellSize = 128
	const flipDuration = 1000
	const gridRotation = 50

	let cellList: GridCell[] = []

	let g_isResizing = false

	const g_setRezingTrue = () => {
		g_isResizing = true
	}

	function debounce(func: Function, immediate?: Function | null, wait: number = 100) {
		let timeout: number

		return (...args: any[]) => {
			if(immediate) immediate()

			clearTimeout(timeout)
			timeout = setTimeout(() => func(...args), wait)
		}
	}

	introElem?.style.setProperty("--flip-duration", `${flipDuration/1000}s`)

	const introResizeObserver = new ResizeObserver(debounce(handleIntroResize, g_setRezingTrue))

	function handleIntroResize(entries: ResizeObserverEntry[]) {
		const introRect = entries[0].contentRect
		const introWidth = introRect.width
		const introHeight = introRect.height

		setTimeout(() => {
			g_isResizing = false
		}, 100)
		
		console.log(introWidth, introHeight)

		introElem?.style.setProperty("--cell-size", `${cellSize}px`)

		introElem?.style.setProperty("--grid-rotation", `${gridRotation}deg`)

		const columnCount = Math.ceil(introWidth / cellSize) + 1
		const rowCount = Math.ceil((introHeight * 2 / cellSize) / Math.cos(gridRotation * Math.PI / 180)) + 1

		let middleX = Math.floor(columnCount / 2)
		let middleY = Math.floor(rowCount / 2)

		if(middleY % 2 === 1) middleY -= 1

		const rodrigoLineup = new SkippingLineup([
			new SkippingImg("/brand-1-R.webp", -10),
			new SkippingImg("/brand-2-o.webp", -40),
			new SkippingImg("/brand-3-d.webp", -30),
			new SkippingImg("/brand-4-r.webp", -50),
			new SkippingImg("/brand-5-i.webp", -135),
			new SkippingImg("/brand-6-g.webp", -100),
			new SkippingImg("/brand-7-o.webp", -20),
		], 0.33, 100)

		const calabriaLineup = new SkippingLineup([
			new SkippingImg("/brand-8-C.webp", -45),
			new SkippingImg("/brand-9-a.webp", -50),
			new SkippingImg("/brand-10-l.webp", -100),
			new SkippingImg("/brand-11-a.webp", -100),
			new SkippingImg("/brand-12-b.webp", -20),
			new SkippingImg("/brand-13-r.webp", -55),
			new SkippingImg("/brand-14-i.webp", -140),
			new SkippingImg("/brand-15-a.webp", -100),
		], 0.33, 100)

		
		// const fullstackLineup = new SkippingLineup([
		// 	new SkippingImg("/text-fs.webp", -65, -850),
		// ], 0.33, 100)

		cellList = []

		if(gridElem) {

			const gridFragment = document.createDocumentFragment()

			gridElem.innerHTML = ""

			
			for(let r = 0; r < rowCount; r++) {
				const row = document.createElement("div")
				row.classList.add("grid-row")
				gridFragment.appendChild(row)

				for(let c = 0; c < columnCount; c++) {
					
					let cell

					if(r == middleY+1 && c == middleX-1) {	
						cell = new GridCell({type: "button", iconName: "github", standingText: "Github", action: () => window.open("https://github.com/Rodrigovicente")})				
					} else if(r == middleY+2 && c == middleX-1) {	
						cell = new GridCell({type: "button", iconName: "linkedin", standingText: "Linkedin", action: () => window.open("https://www.linkedin.com/in/rodrigovcalabria/")})			
					} else if(r == middleY+3 && c == middleX) {	
						cell = new GridCell({type: "button", iconName: "mail", standingText: "Contact", action: () => window.open("mailto:rodrigovcabria@hotmail.com")})				
					} else if(r == middleY+4 && c == middleX) {	
						cell = new GridCell({type: "button", iconName: "resume", standingText: "Resume", action: () => window.open("https://github.com/Rodrigovicente")})				
					} 

					//else if(r == middleY-2 && c == middleX+1) {	
					// 	cell = new GridCell({type: "display", displayImage: "display-rodrigo.webp", offsetX: 1})				
					// } else if(r == middleY-1 && c == middleX+1) {	
					// 	cell = new GridCell({type: "display", displayImage: "display-rodrigo.webp", offsetX: 2})				
					// } else if(r == middleY && c == middleX+2) {	
					// 	cell = new GridCell({type: "display", displayImage: "display-rodrigo.webp", offsetX: 3})				
					// }
					
					else if(r == middleY && c == middleX-2) {
						cell = new GridCell({standingText: "Full-Stack Dev"})
						// cell = new GridCell({skippingLineup: fullstackLineup})
					}
					
					else if(r == middleY-3 && c == middleX) {
						cell = new GridCell({type: "static", skippingLineup: rodrigoLineup})
					} else if(r == middleY-2 && c == middleX) {
						cell = new GridCell({type: "static"})
					} else if(r == middleY-1 && c == middleX+1) {
						cell = new GridCell({type: "static"})
					} else if(r == middleY && c == middleX+1) {
						cell = new GridCell({type: "static"})
					}

					else if(r == middleY-1 && c == middleX) {
						cell = new GridCell({type: "static", skippingLineup: calabriaLineup})
					} else if(r == middleY && c == middleX) {
						cell = new GridCell({type: "static"})
					} else if(r == middleY+1 && c == middleX+1) {
						cell = new GridCell({type: "static"})
					} else if(r == middleY+2 && c == middleX+1) {
						cell = new GridCell({type: "static"})
					}
					
					else {
						cell = new GridCell()
						// if(Math.random() > 0.5) cell.setFlipped()
						if(Math.random() > 0.5) cell.setFlipped()
					}

					row.appendChild(cell.target)					

					cellList.push(cell)
				}
			}

			gridElem.appendChild(gridFragment)

			// const standingText = document.createElement("div")
			// standingText.classList.add("standing-text")
			// standingText.innerText = "Full-Stack Dev"
			// gridElem.appendChild(standingText)
		}


	}

	if(introContentElem) {
		introResizeObserver.observe(introContentElem)
	}


	type GridCellConstructorArgsBase = {
		standingText?: string
		skippingLineup?: SkippingLineup
		type?: never
		iconName?: never
		action?: never
		offsetX?: never
		offsetY?: never
		displayImage?: never
	}

	type GridCellConstructorArgsStatic = {
		standingText?: string
		skippingLineup?: SkippingLineup
		type: "static"
	}

	type GridCellConstructorArgsButton = {
		standingText?: string
		skippingLineup?: SkippingLineup
		type: "button"
		iconName: string
		action: () => void
	}
	
	type GridCellConstructorArgsDisplay = {
		standingText?: string
		skippingLineup?: SkippingLineup
		type: "display"
		offsetX: number
		offsetY?: number
		displayImage: string
	}

	
	type GridCellConstructorArgs = 
	GridCellConstructorArgsBase
	| GridCellConstructorArgsStatic
	| GridCellConstructorArgsButton
	| GridCellConstructorArgsDisplay
	| undefined

	class GridCell {

		isFlipped = false
		isFlipping = false
		isInverted = false
		type: "static" | "button" | "display" | undefined
		target: HTMLDivElement | HTMLButtonElement

		targetInner: HTMLDivElement | null = null

		invertionTimeout: number | null = null
		flipTimeout: number | null = null

		constructor(args?: GridCellConstructorArgs) {

			if(args?.type === "static") {
				this.type = "static"
				this.target = document.createElement("div")

			} else if(args?.type === "button") {
				if(args.iconName == null) throw new Error("Icon name is required for button")
				this.target = document.createElement("button")
				this.target.classList.add("grid-wrapper")
				this.target.setAttribute("type", "button")

				const targetInner = document.createElement("div")
				targetInner.classList.add("inner-content")
				targetInner.style.setProperty("--bg-url", `url("/icon-${args.iconName}.webp")`)
				this.target.appendChild(targetInner)
				this.target.addEventListener("pointerenter", (e) => this.flip(e, true))
				this.target.addEventListener("pointerleave", (e) => this.flip(e, false))

				this.target.addEventListener("click", args?.action)

				this.targetInner = targetInner

			} else if(args?.type === "display") {
				this.target = document.createElement("div")
				this.target.classList.add("grid-wrapper")

				const targetInner = document.createElement("div")
				targetInner.classList.add("inner-content")
				targetInner.classList.add("cell-display")
				targetInner.style.setProperty("--bg-url", `url("/${args.displayImage}")`)
				targetInner.style.setProperty("--bg-offsetX", `-${args.offsetX * 128}px`)
				if(args.offsetY)targetInner.style.setProperty("--bg-offsetY", `-${args.offsetY * 128}px`)
				else targetInner.style.setProperty("--bg-offsetY", `0px`)
				this.target.appendChild(targetInner)
				this.target.addEventListener("pointerenter", this.flip)

				this.targetInner = targetInner

			} else {
				this.target = document.createElement("div")
				this.target.addEventListener("pointerenter", this.flip)

			}
			this.target.classList.add("grid-cell")

			if(args?.standingText) {
				const standingText = document.createElement("div")
				standingText.classList.add("standing-text")

				if(args.type === 'button') {
					for(let i = 0; i < args.standingText.length; i++) {
						const span = document.createElement("span")
						span.innerText = args.standingText[i]
						span.style.setProperty("--transition-delay", `${i}`)
						standingText.appendChild(span)
					}

				} else {
					standingText.innerText = args.standingText

				}
				this.target.appendChild(standingText)
			}
			
			if(args?.skippingLineup) {
				this.target.appendChild(args.skippingLineup.wrapper)
			}
			
		}

		flip = (e?: PointerEvent, isFlipped?: boolean) => {
			if(this.type === "static") return
			if((this.isFlipping || this.target == null) && this.targetInner == null) return

			if(isFlipped != null) {
				if(isFlipped) {
					this.target.classList.add("flipped")
				} else {
					this.target.classList.remove("flipped")
				}

			} else {				
				this.isFlipped = !this.isFlipped
				this.target.classList.toggle("flipped")
			}

			this.isFlipping = true
			
			this.target.classList.add("flipping")

			const invertionTime = this.target.classList.contains("flipped") ? flipDuration / 2.4 : flipDuration / 6

			if(this.invertionTimeout) clearTimeout(this.invertionTimeout)
			if(this.flipTimeout) clearTimeout(this.flipTimeout)

			this.invertionTimeout = setTimeout(() => {
				if(this.target.classList.contains("flipped"))
					this.target.classList.add("inverted")
				else
					this.target.classList.remove("inverted")
			}, invertionTime)

			this.flipTimeout = setTimeout(() => {
				this.target.classList.remove("flipping")
				this.isFlipping = false
			}, flipDuration)
		}

		setFlipped(isFlipped?: boolean) {
			if(this.targetInner) return

			this.isFlipped = isFlipped ?? !this.isFlipped

			if(this.isFlipped){
				this.target.classList.add("flipped")
				this.target.classList.add("inverted")
			} else {
				this.target.classList.remove("flipped")
				this.target.classList.remove("inverted")
			}
		}
	}

	let autoFlip = {
		isRunning: false,
		timeout: 0,
		flipNext: function() {
			
			console.log('flipping')

			if(autoFlip.isRunning) {
				const randIndex = Math.floor(Math.random() * cellList.length)

				// console.log(cellList)

				if(cellList[randIndex]?.targetInner == null) {
					cellList[randIndex]?.flip()					
				}

				const time = Math.floor(Math.random() * 5000) + 1000
				this.timeout = setTimeout(() => {
					this.flipNext()
				}, time)
			}
		},
		start: function () {
			if(this.isRunning) return
			this.isRunning = true
			this.flipNext()
		},
		stop: function () {
			this.isRunning = false
			if(this.timeout) clearTimeout(this.timeout)
		}
	}

	window.addEventListener("blur", () => autoFlip.stop())
	window.addEventListener("focus", () => autoFlip.start())
	autoFlip.start()

	class SkippingLineup {

		wrapper: HTMLDivElement
		radius: number
		imgList: SkippingImg[] = []

		/* pointerTracker?: { x: number, y: number, speed: number } = undefined
		pointer?: { x: number, y: number } = undefined */

		constructor(skippingImgList: SkippingImg[], scale: number = 1, radius?: number) {

			this.radius = radius ?? cellSize

			this.wrapper = document.createElement("div")
			this.wrapper.classList.add("lineup-wrapper")

			if(scale !== 1) this.wrapper.style.setProperty("--lineup-scale", `${scale}`)

			for(let i = 0; i < skippingImgList.length; i++) {

				this.wrapper.appendChild(skippingImgList[i].img)
				skippingImgList[i].setRadius(this.radius)
				this.imgList.push(skippingImgList[i])
			}

			introContentElem?.addEventListener("pointermove", (e: PointerEvent) => {
				if(g_isResizing) return
				this.setPointerPosition(e.clientX, e.clientY)
			})
			
			requestAnimationFrame(this.resetImgRects.bind(this))
			

		}

		
		setPointerPosition(pointerX: number, pointerY: number) {
			for(let i = 0; i < this.imgList.length; i++) {
				this.imgList[i].updatePointerPosition(pointerX, pointerY)
			}
		}
		
		/*
		animateTracker = () => {
			if(!this.pointer) this.pointer = { x: 0, y: 0 }

			if(!this.pointerTracker) this.pointerTracker = {
				x: this.pointer.x,
				y: this.pointer.y,
				speed: 0.05
			}

			const trackerDist = {
				x: Math.abs(this.pointerTracker.x - this.pointer.x),
				y: Math.abs(this.pointerTracker.y - this.pointer.y)
			}

			if(trackerDist.x > 1 && trackerDist.y > 1) {
				const distX: number = (this.pointer.x - this.pointerTracker.x)
				const distY: number = (this.pointer.y - this.pointerTracker.y)

				this.pointerTracker.x += distX * this.pointerTracker.speed
				this.pointerTracker.y += distY * this.pointerTracker.speed
			}

			if(pointer) {
				pointer.style.left = `${this.pointerTracker.x}px`
				pointer.style.top = `${this.pointerTracker.y}px`
			}
			
			this.setPointerPosition(this.pointerTracker.x, this.pointerTracker.y)

			requestAnimationFrame(this.animateTracker)
		}
		*/

		resetImgRects() {
			console.log('reseting')
			this.imgList.forEach(img => {
				img.resetRect()
			})
		}
	}

	class SkippingImg {

		img: HTMLImageElement
		radius: number

		imgRect?: {x: number, y: number} = undefined

		offsetZ = 0
		pointerDist
		skipSpeed = 0.2

		constructor(src: string, offsetX?: number, offsetY?: number, radius?: number) {
			this.radius = radius ?? cellSize			
			this.pointerDist = this.radius + 1

			this.img = document.createElement("img")
			this.img.src = src
			if(offsetX) this.img.style.setProperty("--lineup-img-offsetX", `${offsetX}px`)
			if(offsetY) this.img.style.setProperty("--lineup-img-offsetY", `${offsetY}px`)

			this.animateSkip()
		}

		setRadius(radius: number) {
			this.radius = radius
		}

		updatePointerPosition = (pointerX: number, pointerY: number) => {
			if(!this.imgRect) {
				const imgBoundingClientRect = this.img.getBoundingClientRect()
				this.imgRect = {
					y: imgBoundingClientRect.top + imgBoundingClientRect.height / 2,
					x: imgBoundingClientRect.left + imgBoundingClientRect.width / 2
				}
			}

			const distanceX = pointerX - this.imgRect.x
			const distanceY = pointerY - this.imgRect.y
			this.pointerDist = Math.sqrt(distanceX ** 2 + distanceY ** 2)
		}

		animateSkip() {

			const offsetGoal = Math.max(0, this.radius - this.pointerDist)

			const offsetDist = offsetGoal - this.offsetZ

			if(Math.abs(offsetDist) > 0.001) {
				this.offsetZ += offsetDist * this.skipSpeed
				// if(this.img.src.endsWith("upper.webp")) console.log(this.offsetZ)

				this.img.style.setProperty("--lineup-img-offsetZ", `${this.offsetZ}px`)
			}

			requestAnimationFrame(this.animateSkip.bind(this))
		}

		resetRect() {
			this.imgRect = undefined
		}
	}
	
</script>

<div id={id} class="intro page">
	<div class="intro-content">
		<div id="grid">
		</div>
	</div>
</div>

<style>

	.intro {

		--cell-size: 128px;
		--cell-border-color: rgb(236, 236, 236);
		--cell-flipping-border-color: 200, 200, 200;
		--cell-image: url("/cellBg-01.png");

		--flip-duration: 1s;

		--half-sqrt: 0.70710678118;
		--half-hip: calc(var(--cell-size) * var(--half-sqrt));

		--cell-color: 247, 247, 247;
		--cell-color-shade: 237, 237, 237;

		background-color: rgb(var(--cell-color));
		width: 100%;

		& > .intro-content {

			position: relative;
			width: 100%;
			height: 100dvh;
			max-width: 1920px;
			max-height: 2160px;
			margin: 0 auto;
			background-color: rgb(240, 240, 240);
			overflow: hidden;

			&::after {
				content: "";
				pointer-events: none;
				z-index: 2;
				display: block;
				position: absolute;
				top: 0;
				left: 0;
				width: 100%;
				height: 100%;
				background: radial-gradient(circle, rgba(var(--cell-color),0) 60%, rgba(var(--cell-color),1) 93%);
			}

			#grid {
				display: grid;
				width: 100%;
				grid-template-columns: 1fr;
				/* transform: rotateX(45deg) rotateZ(45deg); */
				transform-origin: top center;
				transform: rotateX(var(--grid-rotation, 50deg));
				transform-style: preserve-3d;
				/* background-color: rgba(0, 0, 0, 0.103); */

				/* &::before {
					content: "";
					display: block;
					position: absolute;
					width: 100%;
					height: 100%;
					background-color: rgb(248, 248, 248);
					transform: translateZ(calc(var(--cell-size) * -1));
				} */

				.grid-row {
					/* outline: solid 1px green; */

					position: relative;
					display: grid;
					width: max-content;
					grid-auto-flow: column;
					grid-template-columns: repeat(auto-fit, var(--cell-size));
					transform-style: preserve-3d;
					pointer-events: none;

					margin-left: calc(var(--cell-size) / -4); /* to center */

					margin-top: calc(var(--cell-size) / -2);
					
					&:nth-child(even) {
						left: calc(var(--cell-size) / -2);

						.grid-cell {

							
							&:not(.grid-wrapper):after,
							&.grid-wrapper > .inner-content {
								background-position: top left;
							}
						
							&.inverted:not(.grid-wrapper):after,
							&.inverted.grid-wrapper > .inner-content {						
								background-position: top right;
							}
						}
					}
					

					.grid-cell {
						pointer-events: auto;
						/* outline: solid 1px green; */
						min-width: var(--cell-size);
						aspect-ratio: 1 / 1;
						transform-style: preserve-3d;
						transform: rotateZ(45deg);
						scale: var(--half-sqrt);
						padding: 0;
						margin: 0;
						border: solid 1px var(--cell-border-color);
						box-shadow: inset 5px 5px 10px rgba(0,0,0,0.05);


						&:not(.grid-wrapper):after,
						&.grid-wrapper > .inner-content {
							content: "";
							display: block;
							position: absolute;
							width: 100%;
							height: 100%;
							background: var(--cell-image) no-repeat top right;
							background-size: cover;
							background-color: rgb(var(--cell-color));
							transition: transform var(--flip-duration),
											outline-color calc(var(--flip-duration) / 2);
							transform: rotateY(0deg);
							/* outline: solid 1px green; */
							
							outline: solid 1px rgba(var(--cell-flipping-border-color), 0);
						}
						
						/* &::before {
							content: "";
							display: block;
							position: absolute;
							width: 100%;
							height: 100%;
							background: url("/cellBg.png") repeat center center;
							background-size: cover;
							background-color: rgb(133, 133, 133);
							transition: transform 0.5s;
							transform: rotateY(0deg) translateZ(-1px);
							/* outline: solid 1px green; 
						} */

						&.flipping:not(.grid-wrapper):after,
						&.flipping.grid-wrapper > .inner-content {						
							outline: solid 1px rgba(var(--cell-flipping-border-color), 1);
							background-color: rgb(var(--cell-color));
							transition: transform var(--flip-duration),
											outline-color calc(var(--flip-duration) / 2),
											background-color var(--flip-duration);
						}
						
						&.inverted:not(.grid-wrapper):after,
						&.inverted.grid-wrapper > .inner-content {
							background-position: top left;
						}

						&.flipped:not(.grid-wrapper):after,
						&.flipped.grid-wrapper > .inner-content {	
							transform: rotateY(180deg);
						}
						

						&.flipped.flipping:not(.grid-wrapper, .inverted):after,
						&.flipped.flipping:not(.inverted).grid-wrapper > .inner-content {						
							background-color: rgb(var(--cell-color-shade));
							transition: transform var(--flip-duration),
											outline-color calc(var(--flip-duration) / 2),
											background-color var(--flip-duration);
						}
						
						&.flipping:not(.grid-wrapper, .inverted, .flipped):after,
						&.flipping:not(.inverted, .flipped).grid-wrapper > .inner-content {						
							background-color: rgb(var(--cell-color));
							transition: transform var(--flip-duration),
											outline-color calc(var(--flip-duration) / 2),
											background-color var(--flip-duration);
						}
						
						&.flipping.inverted:not(.grid-wrapper, .flipped):after,
						&.flipping.inverted:not(.flipped).grid-wrapper > .inner-content {						
							background-color: rgb(var(--cell-color-shade));
							transition: transform var(--flip-duration),
											outline-color calc(var(--flip-duration) / 2),
											background-color calc(var(--flip-duration) * 0.5);
						}

						&.grid-wrapper {
							outline: solid 2px rgba(255, 0, 0, 0);
							background-color: transparent;
							transition: outline-color 0.8s;

							&::after {
								content: "";
								position: absolute;
								top: 0;
								left: 0;
								width: 100%;
								height: 100%;
								transition: box-shadow 0.8s;
								transition-delay: 0s;
								box-shadow: inset 5px 0 0px 2px rgba(0, 0, 0, 0);
							}

							&:hover {
								outline-color:rgba(200, 200, 200, 1);

								&:after {
									transition-delay: 0.8s;
									box-shadow: inset 0 0 35px 0px rgba(0, 0, 0, 0.1);
								}
							}

							& > .inner-content {
								transform-style: preserve-3d;
								width: 100%;
								height: 100%;
								top: 0;
								left: 0;
								pointer-events: none;

								&::before,
								&::after {
									content: "";
									position: absolute;
									display: block;
									transform: translateZ(5px);
									width: 70%;
									height: 70%;
									margin: 15%;
									background: var(--bg-url) no-repeat top left;
									background-size: cover;
								}
								
								&::before {
									transform: translateZ(-1px) scaleX(-1);
									background-position-x: right;

									filter: drop-shadow(0px 0px 0px #0000004d);
								
									transition: transform 0.5s, filter 0.5s;
									transform-timing-function: ease-in-out;
								}
								&::after {
									transform: translateZ(1px);
								}
							}

							&:hover > .inner-content::before {
								transition-delay: 0.35s;
								transform: translateZ(-30px) scaleX(-1);
								filter: drop-shadow(30px 30px 10px #0000004d);
							}

							
							& > .inner-content.cell-display {
								&::before,
								&::after {
									margin: 0;
									width: 100%;
									height: 100%;
									background-position-x: var(--bg-offsetX, 0);
									background-position-y: var(--bg-offsetY, 0);
								}
							}
						}

						& > .standing-text {
							--standing-text-size: 3.5rem;

							position: absolute;
							bottom: 0;
							left: 0;
							width: max-content;
							pointer-events: none;

							font-size: var(--standing-text-size);
							font-weight: bold;
							text-wrap: nowrap;

							text-shadow: -2px -2px 0rem rgb(180, 180, 180);
											/* -4px -4px 0rem rgb(180, 180, 180); */

							transform-origin: bottom left;
							transform: translateZ(-8px) rotateX(-90deg) rotateY(90deg);
						}

						& > .lineup-wrapper {
							position: absolute;
							display: flex;
							flex-wrap: nowrap;
							top: 0;
							left: 0;
							pointer-events: none;
							transform: translateZ(1px) scale(var(--lineup-scale, 1));
							transform-origin: top left;
							transform-style: preserve-3d;

							& > img {
								position: relative;						
								top: var(--lineup-img-offsetY, 0);
								margin-left: var(--lineup-img-offsetX, 0);
								/* transition: transform 0.5s, filter 0.5s; */
								transform: translateZ(var(--lineup-img-offsetZ, 0));
								filter: drop-shadow(calc(var(--lineup-img-offsetZ, 0) * 3.6) calc(var(--lineup-img-offsetZ, 0) * 3.6) calc(var(--lineup-img-offsetZ, 0) * 0.7) #0000002f);
							}
						}
					}

					& > button.grid-cell.grid-wrapper {
						cursor: pointer;

						& > .inner-content:not(#\9) {
							transition: transform 0.6s,
											outline-color 0.3s,
											background-color 0.3s;
						}

						& > .standing-text {
							width: 100%;
							transform-style: preserve-3d;
							text-transform: uppercase;
							font-size: 1.7rem;
							text-align: center;
							font-weight: 300;
							text-shadow: 2px -2px 0rem rgb(180, 180, 180);
							transform: translateZ(-8px) rotateX(-90deg) rotateY(0deg);
							
							& > span {
								opacity: 0;
								display: inline-block;
								transition: transform 0.4s, opacity 0.4s;
								transform: translateY(3rem);
								transition-delay: calc(var(--transition-delay, 0) * 0.05s);
							}
						}

						&:hover > .standing-text > span {
							opacity: 1;
							transform: translateY(-8px);
							transition-delay: calc(var(--transition-delay, 0) * 0.05s + 0.5s);
						}
					}
				}
			}
		}
	}
</style>