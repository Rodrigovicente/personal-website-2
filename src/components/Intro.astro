---

---

<script>
	
	const introElem = document.getElementById("intro")
	const gridElem = document.getElementById("grid")

	const SQRT2 = Math.sqrt(2)
	

	const cellSize = 128
	const flipDuration = 1000

	let cellList: GridCell[] = []

	const introResizeObserver = new ResizeObserver(entries => {
		const introRect = entries[0].contentRect
		const introWidth = introRect.width
		const introHeight = introRect.height
		
		console.log(introWidth, introHeight)

		introElem?.style.setProperty("--cell-size", `${cellSize}px`)

		const columnCount = Math.floor(introWidth / cellSize) + 2
		const rowCount = Math.floor(introHeight / cellSize * 2 * SQRT2) + 2

		const middleX = Math.floor(columnCount / 2)
		const middleY = Math.floor(rowCount / 2)

		cellList = []

		if(gridElem) {

			const gridFragment = document.createDocumentFragment()

			gridElem.innerHTML = ""

			
			for(let r = 0; r < rowCount; r++) {
				const row = document.createElement("div")
				row.classList.add("grid-row")
				gridFragment.appendChild(row)

				for(let c = 0; c < columnCount; c++) {
					
					let cell

					if(r == middleY+1 && c == middleX-1) {	
						cell = new GridCell({type: "button", iconName: "github", action: () => window.open("https://github.com/Rodrigovicente")})				
					} else if(r == middleY+2 && c == middleX) {	
						cell = new GridCell({type: "button", iconName: "linkedin", action: () => window.open("https://www.linkedin.com/in/rodrigovcalabria/")})			
					} else if(r == middleY+3 && c == middleX) {	
						cell = new GridCell({type: "button", iconName: "mail", action: () => window.open("mailto:rodrigovcabria@hotmail.com")})				
					} else if(r == middleY+4 && c == middleX+1) {	
						cell = new GridCell({type: "button", iconName: "resume", action: () => window.open("https://github.com/Rodrigovicente")})				
					} 
					
					// else if(r == middleY-3 && c == middleX) {
					// 	cell = new GridCell({type: "display", displayImage: "display-rodrigo.webp", offsetX: 0})				
					// } else if(r == middleY-2 && c == middleX+1) {	
					// 	cell = new GridCell({type: "display", displayImage: "display-rodrigo.webp", offsetX: 1})				
					// } else if(r == middleY-1 && c == middleX+1) {	
					// 	cell = new GridCell({type: "display", displayImage: "display-rodrigo.webp", offsetX: 2})				
					// } else if(r == middleY && c == middleX+2) {	
					// 	cell = new GridCell({type: "display", displayImage: "display-rodrigo.webp", offsetX: 3})				
					// }
					
					 else if(r == middleY && c == middleX-1) {
						cell = new GridCell({standingText: "Full-Stack Dev"})
					}
					
					else {
						cell = new GridCell()
						if(Math.random() > 0.5) cell.setFlipped()
					}

					row.appendChild(cell.target)					

					cellList.push(cell)
				}
			}

			gridElem.appendChild(gridFragment)

			// const standingText = document.createElement("div")
			// standingText.classList.add("standing-text")
			// standingText.innerText = "Full-Stack Dev"
			// gridElem.appendChild(standingText)
		}


	})

	if(introElem) {
		introResizeObserver.observe(introElem)
	}


	type GridCellConstructorArgsBase = {
		standingText?: string
		skippingText?: string
		type?: never
		iconName?: never
		action?: never
		offsetX?: never
		offsetY?: never
		displayImage?: never
	}

	type GridCellConstructorArgsButton = {
		standingText?: string
		skippingText?: string
		type: "button"
		iconName: string
		action: () => void
	}
	
	type GridCellConstructorArgsDisplay = {
		standingText?: string
		skippingText?: string
		type: "display"
		offsetX: number
		offsetY?: number
		displayImage: string
	}

	
	type GridCellConstructorArgs = 
	GridCellConstructorArgsBase
	| GridCellConstructorArgsButton
	| GridCellConstructorArgsDisplay
	| undefined

	class GridCell {

		isFlipped = false
		isFlipping = false
		isInverted = false
		target: HTMLDivElement | HTMLButtonElement

		targetInner: HTMLDivElement | null = null

		invertionTimeout: number | null = null
		flipTimeout: number | null = null

		constructor(args?: GridCellConstructorArgs) {

			if(args?.type === "button") {
				if(args.iconName == null) throw new Error("Icon name is required for button")
				this.target = document.createElement("button")
				this.target.classList.add("grid-wrapper")
				this.target.setAttribute("type", "button")

				const targetInner = document.createElement("div")
				targetInner.classList.add("inner-content")
				targetInner.style.setProperty("--bg-url", `url("/public/icon-${args.iconName}.webp")`)
				this.target.appendChild(targetInner)
				this.target.addEventListener("pointerenter", (e) => this.flip(e, true))
				this.target.addEventListener("pointerleave", (e) => this.flip(e, false))

				this.target.addEventListener("click", args?.action)

				this.targetInner = targetInner

			} else if(args?.type === "display") {
				this.target = document.createElement("div")
				this.target.classList.add("grid-wrapper")

				const targetInner = document.createElement("div")
				targetInner.classList.add("inner-content")
				targetInner.classList.add("cell-display")
				targetInner.style.setProperty("--bg-url", `url("/public/${args.displayImage}")`)
				targetInner.style.setProperty("--bg-offsetX", `-${args.offsetX * 128}px`)
				if(args.offsetY)targetInner.style.setProperty("--bg-offsetY", `-${args.offsetY * 128}px`)
				else targetInner.style.setProperty("--bg-offsetY", `0px`)
				this.target.appendChild(targetInner)
				this.target.addEventListener("pointerenter", this.flip)

				this.targetInner = targetInner

			} else {
				this.target = document.createElement("div")
				this.target.addEventListener("pointerenter", this.flip)

			}
			this.target.classList.add("grid-cell")

			if(args?.standingText) {
				const standingText = document.createElement("div")
				standingText.classList.add("standing-text")
				standingText.innerText = args.standingText
				this.target.appendChild(standingText)
			}
			
		}

		flip = (e?: PointerEvent, isFlipped?: boolean) => {
			if((this.isFlipping || this.target == null) && this.targetInner == null) return

			if(isFlipped != null) {
				if(isFlipped) {
					this.target.classList.add("flipped")
				} else {
					this.target.classList.remove("flipped")
				}

			} else {				
				this.isFlipped = !this.isFlipped
				this.target.classList.toggle("flipped")
			}

			this.isFlipping = true
			
			this.target.classList.add("flipping")

			const invertionTime = this.target.classList.contains("flipped") ? flipDuration / 2.4 : flipDuration / 6

			if(this.invertionTimeout) clearTimeout(this.invertionTimeout)
			if(this.flipTimeout) clearTimeout(this.flipTimeout)

			this.invertionTimeout = setTimeout(() => {
				if(this.target.classList.contains("flipped"))
					this.target.classList.add("inverted")
				else
					this.target.classList.remove("inverted")
			}, invertionTime)

			this.flipTimeout = setTimeout(() => {
				this.target.classList.remove("flipping")
				this.isFlipping = false
			}, flipDuration)
		}

		setFlipped(isFlipped?: boolean) {
			if(this.targetInner) return

			this.isFlipped = isFlipped ?? !this.isFlipped

			if(this.isFlipped)
				this.target.classList.add("flipped")
			else
				this.target.classList.remove("flipped")
		}
	}

	let autoFlip = {
		isRunning: false,
		timeout: 0,
		flipNext: function() {
			
			console.log('flipping')

			if(autoFlip.isRunning) {
				const randIndex = Math.floor(Math.random() * cellList.length)

				// console.log(cellList)

				if(cellList[randIndex]?.targetInner == null) {
					cellList[randIndex]?.flip()					
				}

				const time = Math.floor(Math.random() * 5000) + 1000
				this.timeout = setTimeout(() => {
					this.flipNext()
				}, time)
			}
		},
		start: function () {
			console.log('starting')
			if(this.isRunning) return
			this.isRunning = true
			this.flipNext()
		},
		stop: function () {
			console.log('stopping')
			this.isRunning = false
			if(this.timeout) clearTimeout(this.timeout)
		}

	}

	
	autoFlip.start()

	
</script>

<div id="intro">
	<div id="grid">
	</div>
</div>

<style>
	#intro {

		--cell-size: 128px;
		--cell-border-color: 211, 211, 211;
		--cell-image: url("/public/cellBg3.png");

		--flip-duration: 1s;

		--half-sqrt: 0.70710678118;
		--half-hip: calc(var(--cell-size) * var(--half-sqrt));

		--gap-color: #bbbbbb;


		width: 100%;
		height: 100dvh;
		background-color: rgb(245, 245, 245);
		overflow: hidden;

		#grid {
			display: grid;
			width: 100%;
			grid-template-columns: 1fr;
			/* transform: rotateX(45deg) rotateZ(45deg); */
			transform-origin: top center;
			transform: rotateX(45deg);
			transform-style: preserve-3d;
			/* background-color: rgba(0, 0, 0, 0.103); */

			/* &::before {
				content: "";
				display: block;
				position: absolute;
				width: 100%;
				height: 100%;
				background-color: rgb(248, 248, 248);
				transform: translateZ(calc(var(--cell-size) * -1));
			} */

			.grid-row {

				display: grid;
				position: relative;
				grid-auto-flow: column;
				grid-template-columns: repeat(auto-fit, var(--cell-size));
				transform-style: preserve-3d;
				pointer-events: none;

				margin-top: calc(var(--cell-size) / -2);
				&:nth-child(even) {
					left: calc(var(--cell-size) / -2);

					.grid-cell {

						
						&:not(.grid-wrapper):after,
						&.grid-wrapper > .inner-content {
							background-position: top left;
						}
					
						&.inverted:not(.grid-wrapper):after,
						&.inverted.grid-wrapper > .inner-content {						
							background-position: top right;
						}
					}
				}
				

				.grid-cell {
					pointer-events: auto;
					/* outline: solid 1px green; */
					aspect-ratio: 1 / 1;
					transform-style: preserve-3d;
					transform: rotateZ(45deg);
					scale: var(--half-sqrt);
					padding: 0;
					margin: 0;
					border: solid 1px white;
					box-shadow: inset 5px 5px 10px rgba(0,0,0,0.05);


					&:not(.grid-wrapper):after,
					&.grid-wrapper > .inner-content {
						content: "";
						display: block;
						position: absolute;
						width: 100%;
						height: 100%;
						background: var(--cell-image) no-repeat top right;
						background-size: cover;
						background-color: var(--gap-color);
						transition: transform var(--flip-duration);
						transform: rotateY(0deg);
						/* outline: solid 1px green; */
						
						outline: solid 1px rgba(var(--cell-border-color), 0);
					}
					
					/* &::before {
						content: "";
						display: block;
						position: absolute;
						width: 100%;
						height: 100%;
						background: url("/public/cellBg.png") repeat center center;
						background-size: cover;
						background-color: rgb(133, 133, 133);
						transition: transform 0.5s;
						transform: rotateY(0deg) translateZ(-1px);
						/* outline: solid 1px green; 
					} */

					&.flipping:not(.grid-wrapper):after,
					&.flipping.grid-wrapper > .inner-content {						
						outline: solid 1px rgba(var(--cell-border-color), 1);
					}
					
					&.inverted:not(.grid-wrapper):after,
					&.inverted.grid-wrapper > .inner-content {
						background-position: top left;
					}

					&.flipped:not(.grid-wrapper):after,
					&.flipped.grid-wrapper > .inner-content {	
						transform: rotateY(180deg);
					}
					/* &.flipped::before {
						/* background-color: rgb(175, 214, 240); 
						transform: rotateY(180deg) translateZ(-1px);
					} */

					&.grid-wrapper {
						outline: solid 2px rgba(255, 0, 0, 0);
						background-color: transparent;
						transition: outline-color 0.8s;

						&::after {
							content: "";
							position: absolute;
							top: 0;
							left: 0;
							width: 100%;
							height: 100%;
							transition: box-shadow 0.8s;
							transition-delay: 0s;
							box-shadow: inset 5px 0 0px 2px rgba(0, 0, 0, 0);
						}

						&:hover {
							outline-color:rgba(200, 200, 200, 1);

							&:after {
								transition-delay: 0.8s;
								box-shadow: inset 0 0 35px 0px rgba(0, 0, 0, 0.1);
							}
						}

						& > .inner-content {
							transform-style: preserve-3d;
							width: 100%;
							height: 100%;
							top: 0;
							left: 0;

							&::before,
							&::after {
								content: "";
								position: absolute;
								display: block;
								transform: translateZ(5px);
								width: 70%;
								height: 70%;
								margin: 15%;
								background: var(--bg-url) no-repeat top left;
								background-size: cover;
							}
							
							&::before {
								transform: translateZ(-1px) scaleX(-1);
								background-position-x: right;

								filter: drop-shadow(0px 0px 0px #0000004d);
							
								transition: transform 0.5s, filter 0.5s;
								transform-timing-function: ease-in-out;
							}
							&::after {
								transform: translateZ(1px);
							}
						}

						&:hover > .inner-content::before {
							transition-delay: 0.35s;
							transform: translateZ(-30px) scaleX(-1);
							filter: drop-shadow(30px 30px 10px #0000004d);
						}

						
						& > .inner-content.cell-display {
							&::before,
							&::after {
								margin: 0;
								width: 100%;
								height: 100%;
								background-position-x: var(--bg-offsetX, 0);
								background-position-y: var(--bg-offsetY, 0);
							}
						}
					}

					& > .standing-text {
						--standing-text-size: 3.5rem;

						position: absolute;
						bottom: 0;
						left: 0;
						width: max-content;
						pointer-events: none;

						font-size: var(--standing-text-size);
						font-weight: bold;
						text-wrap: nowrap;

						transform-origin: bottom left;
						transform: translateZ(-8px) rotateX(-90deg) rotateY(90deg);
					}
				}

				& > button.grid-cell.grid-wrapper {
					cursor: pointer;

					& > .inner-content {
						transition: transform 0.6s;
					}
				}
			}
		}
	}
</style>