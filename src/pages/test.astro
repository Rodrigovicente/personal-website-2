---
import Layout from '../layouts/Layout.astro';
import Intro from '../components/Intro.astro';
import Menu from '../components/Menu.astro';
import About from '../components/About.astro'
---

<script>

	/*
	document.body.style.height = (window.innerHeight) * 3 + 'px'

	const pageList: Page[] = []

	let scrollDebounceTimeout: number | null = null

	let targetScrollHeight = 0

	let currPage: Page

	let isAutoScrolling = false

	let animFrameRequest: number

	window.addEventListener('scroll', (e) => {
		if(scrollDebounceTimeout)
			clearTimeout(scrollDebounceTimeout)

		// console.log(window.scrollY)

		cancelAnimationFrame(animFrameRequest)

		isAutoScrolling = false

		scrollDebounceTimeout = setTimeout(() => animScroll(), 150)

	})

	function animScroll() {

		console.log('ANIMATING')

		let nearestPage: Page

		pageList.forEach((p) => {
			const dist = Math.abs(window.scrollY - p.scrollHeight)
			if(dist < (nearestPage ? Math.abs(window.scrollY - nearestPage.scrollHeight) : Infinity)) {
				nearestPage = p
			}
		})

		console.log('>> ', nearestPage?.pageElem.id)

		if((nearestPage?.scrollHeight) == null) return

		currPage = nearestPage

		if(!isAutoScrolling)
		autoScrollToCurrPage()

		if(scrollDebounceTimeout) {
			clearTimeout(scrollDebounceTimeout)
			scrollDebounceTimeout = null
		}
	}

	function autoScrollToCurrPage() {
		if(!currPage) return

		isAutoScrolling = true

		const dist = currPage.scrollHeight - window.scrollY

		if(Math.abs(dist) <= 3) {
			window.scrollTo({
				top: currPage.scrollHeight,
				left: 0,
				behavior: 'instant'
			})

			isAutoScrolling = false
			return

		} else {
			let step = dist * 0.1
			if(step < 1 && step > 0) step = 1
			else if(step > -1 && step < 0) step = -1

			window.scrollBy({
				top: step,
				left: 0,
				behavior: "instant",
			});
		}

		animFrameRequest = requestAnimationFrame(autoScrollToCurrPage)
	}

	class Page {

		scrollHeight: number
		// snapMargin: number = 200
		scrollPos: number = 0
		scrollMargin: number = window.innerHeight

		pageElem: HTMLDivElement
		
		// bloat: HTMLDivElement

		constructor(scrollHeight: number, id: string) {
			// this.bloat = document.createElement('div')
			// this.bloat.style.height = window.innerHeight + 'px'
			// document.body.appendChild(this.bloat)

			
			this.scrollHeight = scrollHeight

			const page = document.getElementById(id) as HTMLDivElement
			console.log(page)
			page.classList.add('page')
			
			if(!page)
				throw new Error(`Page id doesn't exist`)

			this.pageElem = page

			window.addEventListener('scroll', this.swipeBack.bind(this))

			pageList.push(this)
		}

		swipeBack() {
			// const scrollTop = bloatElem!.scrollTop
			const scrollDiff = window.scrollY - this.scrollPos
			// console.log('anim', scrollDiff)

			const maxStep = 1

			this.scrollPos += scrollDiff > 0 ? 
									Math.min(scrollDiff * 0.02, maxStep)
									: Math.max(scrollDiff * 0.02, -maxStep)

			let scrollDist_unorm = this.scrollHeight - this.scrollPos
			
			if(scrollDist_unorm < -this.scrollMargin) scrollDist_unorm = -this.scrollMargin
			else if(scrollDist_unorm > this.scrollMargin) scrollDist_unorm = this.scrollMargin

			const scrollDist = scrollDist_unorm / this.scrollMargin

			const moveY = ((-scrollDist) ** 2 * 6 + scrollDist * 4) * (this.scrollMargin/2)
			const scale = (scrollDist + 1) * 0.5 + 0.5

			this.pageElem.style.setProperty('transform', `scale(${scale}) translateY(${moveY}px)`)

			if(scrollDiff > 0.001 || scrollDiff < -0.001)
				requestAnimationFrame(this.swipeBack.bind(this))
			else
				this.scrollPos = window.scrollY

		}
	}

	setTimeout(() => {

		// const introPage = new Page(0, 'intro')
		const aboutPage = new Page(0, 'about')
		const about2Page = new Page(window.innerHeight, 'about2')
		const about3Page = new Page(window.innerHeight*2, 'about3')

		currPage = aboutPage

		// introPage.swipeBack()
	}, 200)
	*/


	const sectionElemList = [
		document.getElementById('intro'),
		document.getElementById('about2'),
		document.getElementById('about3'),
	] as HTMLElement[]

	const contentElem = document.getElementById('content') as HTMLElement

	class SectionSwapper {

		parent: HTMLElement
		sectionList: Section[]

		constructor(parent: HTMLElement, sectionElemList: HTMLElement[]) {

			this.parent = parent

			const wrapper = document.createElement('div')
			wrapper.classList.add('content-wrapper')

			this.sectionList = sectionElemList.map(elem => {
				const section = new Section(elem, this.parent)
				wrapper.appendChild(section.wrapper)
				return section
			})

			this.parent.appendChild(wrapper)

			this.parent.addEventListener('scroll', this.onScroll)
			this.parent.addEventListener('resize', this.onResize)
		}

		get parentRect() {
			return this.parent.getBoundingClientRect()
		}

		onScroll = () => {
			console.log(this.parent.scrollHeight)
			this.sectionList.forEach((section) => {
				section.onScroll()
			})
		}
		
		onResize = () => {
			this.sectionList.forEach((section) => {
				section.onResize()
			})
		}
	}

	class Section {
		elem: HTMLElement
		parent: HTMLElement
		wrapper: HTMLElement
		progress: { in: number | null, out: number | null} = { in: null, out: null}

		constructor(elem: HTMLElement, parent: HTMLElement) {
			this.elem = elem
			this.parent = parent

			const wrapper = document.createElement('div')
			wrapper.classList.add('section-wrapper')
			wrapper.style.height = this.elem.getBoundingClientRect().height + 'px'
			wrapper.appendChild(this.elem)
			this.wrapper = wrapper

		}

		onResize() {
			this.wrapper.style.height = this.elem.getBoundingClientRect().height + 'px'
		}

		onScroll() {
			const parentRect = this.getParentRect()
			const relativeRect = this.getRelativeRect()

			const distTop = parentRect.bottom - relativeRect.top
			const distBottom = parentRect.top - relativeRect.bottom

			console.log(this.elem.id, '-->>', relativeRect.bottom, parentRect.height)

			if(relativeRect.top < parentRect.bottom && relativeRect.top > 0)
				this.setProgress(
					distTop / parentRect.height,
					null
				)
			else if(relativeRect.bottom < 0 && relativeRect.bottom > -parentRect.height)
				this.setProgress(
					null,
					distBottom / parentRect.height
				)
			else
				this.setProgress(null, null)


				console.log('*******', this.getWrapperRect().bottom, this.getWrapperRect().top)
			if(this.getWrapperRect().bottom < 0 || this.getWrapperRect().top > window.innerHeight)
				this.elem.style.opacity = '0'
		}

		setProgress(progressIn: number | null, progressOut: number | null) {

			console.log(this.elem.id, '>', progressIn, progressOut)
			
			if(progressIn === null) {}
			else if(progressIn < 0) progressIn = 0
			else if(progressIn > 1) progressIn = 1
			
			if(this.progress.in !== progressIn) {
				this.progress.in = progressIn
				this.swapIn()
			}
			
			if(progressOut === null) {}
			else if(progressOut < 0) progressOut = 0
			else if(progressOut > 1) progressOut = 1
			
			if(this.progress.out !== progressOut) {
				this.progress.out = progressOut
				this.swapOut()
			}

		}

		swapIn() {
			const progress = this.progress.in

			if(progress === null) {
				return
			}
			this.elem.removeAttribute('style')

			this.elem.style.transformOrigin = 'top center'

			const translateAmount = -4 * (progress ** 2) + 4 * progress
			const translateY = translateAmount * (-this.getParentRect().height / 4)
			
			const rotateX = (1-progress) * -70
			
			// this.elem.style.opacity = `${0.2 * (progress) + 0.8}`
			this.elem.style.transform = `translateY(${translateY}px) scale(${(1 - progress) + 1}) rotateX(${rotateX}deg)`

		}
		
		swapOut() {
			// console.log('outing')
			const progress = this.progress.out

			if(progress === null) {
				return
			}
			
			this.elem.removeAttribute('style')

			const rect = this.getRect()
			const wrapperRect = this.getWrapperRect()
			const parentRect = this.getParentRect()

			const scale = 1 - (progress * 0.8)

			// this.elem.style.opacity = `${1 - progress}`
			const translateAmount = - (progress ** 2)
			// const translateY = translateAmount * -this.getParentRect().height - rect.top - (rect.height - (rect.height * scale / 2))
			const translateY = translateAmount * -rect.height - (rect.bottom - parentRect.height) - (rect.height * (1 - scale) / 2)

			const rotateX = progress * 85

			// this.elem.style.opacity = `${0.9 * (1-progress) + 0.1}`
			this.elem.style.transform = `translateY(${translateY}px) scale(${scale}) rotateX(${rotateX}deg)`
			// this.elem.style.transformOrigin = `top`
		}

		getRect() {
			return this.wrapper.getBoundingClientRect()
		}

		getParentRect() {
			return this.parent.getBoundingClientRect()
		}
		
		getWrapperRect() {
			return this.wrapper.getBoundingClientRect()
		}
		
		getRelativeRect() {
			const parentRect = this.getParentRect()
			const rect = this.getRect()

			return {
				top: rect.top - parentRect.top,
				right: rect.right - parentRect.right,
				bottom: rect.bottom - parentRect.bottom,
				left: rect.left - parentRect.left,
				height: rect.height,
				width: rect.width
			}
		}
		
		getWrapperRelativeRect() {
			const parentRect = this.getParentRect()
			const rect = this.getWrapperRect()

			return {
				top: rect.top - parentRect.top,
				right: rect.right - parentRect.right,
				bottom: rect.bottom - parentRect.bottom,
				left: rect.left - parentRect.left,
				height: rect.height,
				width: rect.width
			}
		}
	}

	setTimeout(() => {
	console.log(sectionElemList[2].getBoundingClientRect())

	}, 1000)


	const swapper = new SectionSwapper(contentElem, sectionElemList)

</script>

<Layout title="Welcome to Astro.">
	<div id="content">
		<!-- <Intro id="intro"/> -->
		<About id="intro"/>
		<About id="about2"/>
		<About id="about3"/>
	</div>
	<!-- <Menu></Menu> -->
</Layout>

<style>
	#content {
		max-width: 100%;
		/* padding-right: 150px; */
		background-color: rgb(199, 199, 199);
		
	}

</style>

<style is:global>
	.content {
		height: 100dvh;
		width: 100dvw;

		& > .page {
			border-radius: 3rem;
			will-change: transform;
		}
	}
	
	body {
		
	}
	#content {
		height: 100vh;
		overflow-y: scroll;
		overflow-x: hidden;
		display: grid;
		grid-template-columns: 1fr;
		scroll-behavior: smooth;
    	/* scroll-snap-type: y mandatory; */
	}
	
	.content-wrapper {
		width: 100%;
		min-height: 100%;
		height: fit-content;
		overflow: hidden;
		will-change: transform;
		padding-top: 150vh;
		/* overflow-x: visible; */

		& > .section-wrapper {
			position: relative;
			scroll-snap-align: start;
			outline: solid green 1px;
			perspective: 300rem;
			/* padding-block: 5rem; */

			&:first-child {
				padding-top: 0;
			}

			&:last-child {
				padding-bottom: 0;
			}

			& > div {
			}
		}
	}

	
	#about {
		/* transform: scale(0.5); */
	}
</style>